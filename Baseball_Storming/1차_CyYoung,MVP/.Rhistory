setwd("C:\\Users\\dlwog\\Desktop\\Rcode")
MVPB <- read.csv("MVPB.csv")
setwd("C:\\Users\\dlwog\\Desktop\\Rcode")
MVPB <- read.csv("MVPB.csv")
MVPB2018 <- read.csv("MVPB2018.csv")
setwd("C:\\Users\\dlwog\\Desktop\\Rcode")
library(plyr)
pitching <- read.csv("pitching2017.csv")
cy <- read.csv("Cy.csv")
cy2018 <- read.csv("cy2018.csv")
MVPB <- read.csv("MVPB.csv")
setwd("C:\\Users\\dlwog\\Desktop\\Rcode")
MVPB <- read.csv("MVPB.csv")
MVPB2018 <- read.csv("MVPB2018.csv")
MVPP <- read.csv("MVPP.csv")
MVPP2018 <- read.csv("MVPP2018.csv")
678/100*70
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPB)[,-1]
MVPB$Nameco <- as.character(cy$Nameco)
MVPB$Nameco <- as.character(MVPB$Nameco)
NMVPB <- MVPB[,-c(1:5, 7, 8)]
AMVPB2018 <- subset(MVPB2018, Lg == "AL")
NMVPB2018 <- subset(MVPB2018, Lg == "NL")
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPB)[,-1]
y <- NMVPB$Vote.Pts
set.seed(1)
train = sample(1:nrow(NMVPB), 470)
test = (-train)
ytest = y[test]
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.8)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.1)
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.1)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.2)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.3)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.4)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.5)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.6)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.7)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.8)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.9)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
b[12]
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.9)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
bmpoint <- function(py) {
d <- with(py,
b[1]
+ b[2] * WAR + b[3] * G
+ b[5] * R + b[7] * HR
+ b[8] * RBI + b[9] * SB
+ b[11] * BA + b[12] * OBP
}
bmpoint <- function(py) {
d <- with(py,
b[1]
+ b[2] * WAR + b[3] * G
+ b[5] * R + b[7] * HR
+ b[8] * RBI + b[9] * SB
+ b[11] * BA + b[12] * OBP
)
}
Aresult <- cpoint(Acy2018)
bmAresult <- bmpoint(AMVPB2018)
head(AMVPB2018$Name[(order(bmAresult, decreasing = T))])
bmNresult <- bmpoint(NMVPB2018)
head(AMVPB2018$Name[(order(bmNresult, decreasing = T))])
MVPB$Nameco <- as.character(MVPB$Nameco)
NMVPB <- MVPB[,-c(1:5, 7, 8)]
AMVPB2018 <- subset(MVPB2018, Lg == "AL" & AB >= 150)
NMVPB2018 <- subset(MVPB2018, Lg == "NL" & AB >= 150)
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPB)[,-1]
y <- NMVPB$Vote.Pts
set.seed(1)
train = sample(1:nrow(NMVPB), 470)
test = (-train)
ytest = y[test]
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.9)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
bmpoint <- function(py) {
d <- with(py,
b[1]
+ b[2] * WAR + b[3] * G
+ b[5] * R + b[7] * HR
+ b[8] * RBI + b[9] * SB
+ b[11] * BA + b[12] * OBP
)
}
bmAresult <- bmpoint(AMVPB2018)
head(AMVPB2018$Name[(order(bmAresult, decreasing = T))])
bmNresult <- bmpoint(NMVPB2018)
head(AMVPB2018$Name[(order(bmNresult, decreasing = T))])
bmNresult <- bmpoint(NMVPB2018)
head(NMVPB2018$Name[(order(bmNresult, decreasing = T))])
MVPP$Nameco <- as.character(MVPP$Nameco)
NMVPP <- MVPP[,-c(1:5, 7, 8)]
AMVPP2018 <- subset(MVPP2018, Lg == "AL" & IP >= 50)
NMVPP2018 <- subset(MVPP2018, Lg == "NL" & IP >= 50)
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPP)[,-1]
y <- NMVPP$Vote.Pts
set.seed(1)
train = sample(1:nrow(NMVPP), 470)
161/100*70
MVPP$Nameco <- as.character(MVPP$Nameco)
NMVPP <- MVPP[,-c(1:5, 7, 8)]
AMVPP2018 <- subset(MVPP2018, Lg == "AL" & IP >= 50)
NMVPP2018 <- subset(MVPP2018, Lg == "NL" & IP >= 50)
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPP)[,-1]
y <- NMVPP$Vote.Pts
set.seed(1)
train = sample(1:nrow(NMVPP), 110)
test = (-train)
ytest = y[test]
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.9)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
d <- with(py,
b[1]
+ b[2] * WAR + b[3] * W
+ b[4] * R + b[5] * HR
+ b[6] * RBI + b[7] * SB
+ b[8] * BA + b[9] * OBP
+ b[9]
+ b[9]
+ b[9]
+ b[9]
)
MVPP$Nameco <- as.character(MVPP$Nameco)
NMVPP <- MVPP[,-c(1:5, 7, 8)]
AMVPP2018 <- subset(MVPP2018, Lg == "AL" & IP >= 50)
NMVPP2018 <- subset(MVPP2018, Lg == "NL" & IP >= 50)
library(glmnet)
x <- model.matrix(Vote.Pts ~., NMVPP)[,-1]
y <- NMVPP$Vote.Pts
set.seed(1)
train = sample(1:nrow(NMVPP), 110)
test = (-train)
ytest = y[test]
set.seed(1)
cv.lasso <- cv.glmnet(x[train,], y[train], alpha = 0.9)
lasso.coef = predict(cv.lasso, type = "coefficients",
s = cv.lasso$lambda.min) # coefficients
lasso.prediction = predict(cv.lasso, s = cv.lasso$lambda.min,
newx = x[test,]) # coefficients
lasso.coef
b <- lasso.coef
cv.lasso$lambda.min
cor(lasso.prediction, ytest)
sqrt((mean(lasso.prediction - ytest)^2))
pmpoint <- function(py) {
d <- with(py,
b[1]
+ b[2] * WAR + b[3] * W + b[4] * L
+ b[5] * ERA + b[6] * WHIP
+ b[7] * G + b[8] * GS
+ b[9] * SV + b[10] * IP
+ b[11] * H
+ b[12] * HR
+ b[13] * BB
+ b[14] * SO
)
}
pmAresult <- pmpoint(AMVPP2018)
head(AMVPP2018$Name[(order(pmAresult, decreasing = T))])
pmNresult <- pmpoint(NMVPP2018)
head(NMVPP2018$Name[(order(pmNresult, decreasing = T))])
pmpoint(AMVPP2018$Name[Chris?Sale*])
pmpoint(AMVPP2018$Name[Chris?Sale*])
pmpoint(AMVPP2018[,Name == Chris?Sale*])
pmpoint(AMVPP2018[,Name == "Chris?Sale*"])
pmpoint(AMVPP2018[AMVPP2018$Name == "Chris?Sale*"])
AMVPP2018$Name == "Chris?Sale"
AMVPP2018[AMVPP2018$Name == "Chris?Sale"]
AMVPP2018[AMVPP2018$Name == "Chris?Sale*"]
AMVPP2018[AMVPP2018$Name == "Chris?Sale",]
AMVPP2018[,AMVPP2018$Name == "Chris?Sale"]
pmpoint(subset(AMVPP2018, Name == "Chris?Sale*"])
pmpoint(subset(AMVPP2018, Name == "Chris?Sale"])
pmpoint(subset(AMVPP2018, Name == "Chris?Sale")
)
pmpoint(subset(AMVPP2018, Name == "Chris?Sale"))
a <- subset(AMVPP2018, Name == "Chris?Sale")
a
View(AMVPP2018)
a <- subset(AMVPP2018, Nameco == "salech01")
a
pmpoint(subset(AMVPP2018, Nameco == "salech01"))
sale <- subset(AMVPP2018, Nameco == "salech01")
pmpoint(sale)
sale <- pmpoint(subset(AMVPP2018, Nameco == "salech01"))
View(NMVPP2018)
scherzer <- pmpoint(subset(NMVPP2018, Nameco == "scherma01"))
View(AMVPB2018)
View(NMVPP2018)
View(NMVPP2018)
View(NMVPB2018)
sale <- pmpoint(subset(AMVPP2018, Nameco == "salech01"))
betts <- bmpoint(subset(AMVPB2018, Nameco == "bettsmo01"))
scherzer <- pmpoint(subset(NMVPP2018, Nameco == "scherma01"))
yelich <- bmpoint(subset(AMVPB2018, Nameco == "yelicch01"))
sale
betts
scherzer
yelich
sale <- pmpoint(subset(AMVPP2018, Nameco == "salech01"))
betts <- bmpoint(subset(AMVPB2018, Nameco == "bettsmo01"))
scherzer <- pmpoint(subset(NMVPP2018, Nameco == "scherma01"))
yelich <- bmpoint(subset(NMVPB2018, Nameco == "yelicch01"))
sale
betts
scherzer
yelich
setwd("C:\\Users\\dlwog\\Desktop\\Rcode")
library(plyr)
pitching <- read.csv("pitching2017.csv")
cy <- read.csv("Cy.csv")
